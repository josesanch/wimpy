<?
include_once(dirname(__FILE__)."/functions.php");
require dirname(__FILE__)."/applicationcontroller.php";

class Web {

	private $images_max_size = array(1024, 1024);
	public $laguages = array("es");
	private $html_template_dir = "/templates";
	private $debug = false;
	public $database;
	private static $default_instance;	// La primera clase que se crea
	private $default_controller = "index";
	private $application_path;
	public $controller, $action, $params, $uri;
	public $l10n;


	public function __construct($database = null, $languages = null) {
		error_reporting(E_ALL ^ E_NOTICE ^ E_WARNING );
		if(!web::$default_instance)  {
			web::$default_instance = $this;
			$this->l10n = new l10n();
			make_link_resources();
		}
//		if($languages) $this->setLanguages($languages);
		if($database) $this->setDatabase($database);


		$this->application_path =  $_SERVER["DOCUMENT_ROOT"]."/../application/";
	}


	public function setLanguages($langs) {
		$this->l10n->setLanguages($langs);
	}
	public function getLanguages() {
		return $this->l10n->getLanguages();
	}

	public function setImagesMaxSize($height, $width) {
		$this->images_max_size = array($height, $width);
	}

	public function setDatabase($database) {
		$this->database = new Database($database);
		if(!$this->database->tableExists('images')) {
			create_images_and_files_tables($this->database);
		}
		$this->database->exec('SET character_set_results = utf8;');
		$this->database->exec('SET character_set_client = utf8;');

	}

	public function setHtmlTemplatesDir($templates_dir) {
		$this->html_template_dir = $templates_dir;
	}

	public static function instance() {
		return web::$default_instance;
	}

	private function parseInfo($uri) {
		$url = parse_url($uri);
		$uri = explode("/", substr($url["path"], 1));
		$uri[0] = $uri[0] ? strtolower($uri[0]) : "index";	// Controlador por defecto indexController.
		$uri[1] = isset($uri[1]) && $uri[1] != "" ? strtolower($uri[1]) : "index";  // MÃ©todo por defecto index.
		$this->controller = strtolower(array_shift($uri));
		$this->action = array_shift($uri);
		$this->params = $uri;
	}

	public function run($uri = null, $view = null) {		// este es el front controller
		$render = false;
		if(!$uri) {
			$render = true;
			$uri = $_SERVER["REQUEST_URI"];
		}
		$this->uri = $uri;
		$this->parseInfo($uri);
		switch ($this->controller) {
			case 'admin':
				return $this->callAdminDispatcher($render);
			break;

			case 'ajax':
				$this->callAjaxDispatcher();
			break;

			default:
				return $this->callDefaultDispatcher($render, $view);

		}
	}

	public function redirect($uri) {
		$this->uri = $uri;
		$params = $this->params;
		$this->parseInfo($uri);
		$this->callDefaultDispatcher();
	}

	private function callDefaultDispatcher($render = true, $view = null) {
		$controller_class = ucfirst($this->controller)."Controller";


		$action = $this->action;

		if(!$this->loadController($controller_class) || !method_exists ($controller_class, $this->action."Action")) {
			$action = "error";
			$controller_class = "ErrorController";
			array_unshift($this->params, $this->controller, $this->action);
			require_once($this->application_path."controllers/$controller_class.php");
		}

		$controller = new $controller_class($view);
		$controller->setApplicationPath($this->application_path);
		$controller->view->controller = $this->controller;
		$controller->view->action = $this->action;

		if(!$render) $controller->layout = '';

		call_user_method_array($action."Action", $controller, $this->params);

		if($render) {
			$controller->render($this->action);
		} else {

			return $controller->renderHtml($this->action);
		}
	}

	private function callAjaxDispatcher() {
		// Cuando el controlador es ajax llamamos a la funcion functionAjax del modelo /ajax/model/function
		$controller_name = $this->action;
		$action = array_shift($this->params);
		$model = new $controller_name();
		call_user_method_array($action."Ajax", $model, $this->params);
	}

	private	function callAdminDispatcher($render = true) {
		if($this->action == "index") {
			$this->callDefaultDispatcher();
			return;
		}
		$controller_class = ucfirst($this->controller)."Controller";
		$model = $this->action;
		$action = array_shift($this->params);
		$action = $action ? $action	: "list";
		require_once($this->application_path."controllers/$controller_class.php");
		$controller = new $controller_class();
		call_user_method_array($model.ucfirst($action), $controller, $this->params);
		$controller->setApplicationPath($this->application_path);
		$controller->view->controller = $this->controller;
		$controller->view->action = $this->action;
		if($render)
			$controller->render($this->action);
		else
			return $controller->renderHtml($this->action);

	}

	public function getApplicationPath() {
		return $this->application_path;
	}


	public function loadController($name) {
		if(file_exists($this->application_path."controllers/$name.php")) {
			require_once($this->application_path."controllers/$name.php");
			return class_exists($name, False);
		}
		return false;
	}

	public function setLanguage($lang) {
		$this->l10n->setLanguage($lang);
	}

	public function setDefaultLanguage($lang) {
		$this->l10n->setDefaultLanguage($lang);
	}
}
?>
